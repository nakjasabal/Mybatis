<?xml version="1.0" encoding="UTF-8"?>

<!--  
해당 XML파일이 Mapper역할이라는것을 명시하기위해 필요한 Doctype이다. 
공식문서URL : https://mybatis.org/mybatis-3/getting-started.html
버전확인 : https://mvnrepository.com/artifact/org.mybatis/mybatis
--> 
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--   
Mybatis의 쿼리실행을 위한 엘리먼트 별 반환값
<select>
	: select한 결과 레코드를 반환한다. count(*)의 경우 int형의 반환값을
	가지고, 일반적인 경우는 DTO객체를 List컬렉션에 저장한 후 반환한다. 
<insert>
	: 입력성공시 1, 실패시 0을 반환한다. 만약 insert가 여러번 되더라도 
	성공시에는 1을 반환한다. 
<update>,<delete>
	: 수정, 삭제에 성공한 행의 갯수가 반환된다. 조건에 따라 여러개의 레코드가
	한꺼번에 적용될 수 있으므로 0과 1이 아닌 더 큰값이 반환될수 있다. 
-->

<!--  
파라미터 사용법
형식1] {param1}, {param2}
	가령 함수명(인수1, 인수2)와 같이 사용한다면 파라미터의 순서대로 
	1, 2와 같이 사용한다. 
형식2] {0}, {1}
	인덱스를 사용하는 방법으로 매개변수의 순서대로 {0}, {1}과 같이 사용한다. 
형식3] @Param 어노테이션을 사용하는 방법
	@Param(_변수명의별칭 String 매개변수) => Mapper에서는 '_변수명의별칭'으로 
	인파라미터를 설정할 수 있다. 
형식4] DTO와 같은 데이터객체를 사용하는 방법
	일반적인 DTO(혹은 VO)객체를 생성한 후 전달할 파라미터를 저장하고, 
	Mapper에서는 getter()호출을 위해 멤버변수명으로 접근하여 인파라미터를 설정한다.
형식5] 컬렉션을 사용하는 방법. Map 혹은 List 컬렉션을 사용하여
	매개변수를 저장 및 인파라미터 설정을 할 수 있다. 
-->
  
<!--  
Mapper파일의 최상위 엘리먼트는 <mapper>이다. 
namespace의 속성
	: 해당 매퍼파일을 호출하기 위해 정의한 인터페이스의 패키지를 포함한
	풀 경로를 기술한다. 해당 인터페이스는 컨트롤러와 Mappeer(DAO)사이를
	연결해주는 역할을 하는 서비스객체로 사용된다.  
-->  
<mapper namespace="mybatis.ServiceMyBoard">
 
 	<!-- 방명록 게시판의 게시물 갯수를 카운트하여 정수로 반환한다. -->
 	<!-- 
 	속성설명 
 		id : 실제 호출되는 메서드명과 동일한 이름으로 기술한다. 
 			컨트롤러에서는 해당 Mapper를 호출하기 위해 interface에 정의된
 			추상메서드를 호출하게된다. 
 		resultType : 쿼리 실행후 반환되는 값의 타입을 명시한다. 이때는
 			패키지명을 포함한 풀 경로를 기술해야 한다. 
 	-->
	<select id="getTotalCount" resultType="int">
		SELECT COUNT(*) from myboard
	</select>
	
	<!-- 목록에 출력할 게시물을 select한 후 결과는 ArrayList<MyBoardDTO>타입으로
	반환한다. Mybatis는 레코드 인출을 위한 <select>엘리먼트로 실행할 경우 반환값은 
	List컬렉션으로 생성해준다. -->
	<!-- 인터페이스에 정의된 listPage(int s, int e) 메서드 호출시 전달된 파라미터
	s, e는 아래와 같이 param1, param2로 전달되어 사용된다. 즉, 인파라미터 설정시 
	별도의 메서드 없이 즉시 사용할 수 있다.  -->
	<select id="listPage" resultType="mybatis.MyBoardDTO">			
		SELECT * FROM (
		    SELECT Tb.*, rownum rNum FROM (
		        SELECT * FROM myboard ORDER BY idx DESC
		    ) Tb
		)
		WHERE rNum BETWEEN #{param1} AND #{param2}
	</select>
	
	<!--  
	@Param 어노테이션에서 지정한 별칭을 사용해서 인파라미터를 처리한다. 
	일련번호는 기존과 동일하게 시퀀스를 통해 입력한다. 
	<insert>의 경우 반환타입을 별도로 명시하지 않아도 정수값을 반환한다.
	-->
	<insert id="write">
		INSERT INTO myboard (idx, id, name, contents)
		VALUES
		(myboard_seq.nextval, #{_id}, #{_name}, #{_contents}) 
	</insert>
	
	<!--  
	파라미터를 DTO객체에 저장한 후 Mapper로 전달하므로 parameterType 속성에 
	해당 DTO객체의 타입을 패키지명과 함께 명시한다. EL에서 멤버변수명 만으로 값에 
	접근할 수 있듯이 Mapper에서도 동일하게 접근할 수 있다. 즉, getter()를 사용한다. 
	게시물을 조회(SELECT)한 결과는 MyBoardDTO객체에 저장한 후 반환한다.
	-->
	<select id="view" resultType="mybatis.MyBoardDTO" 
		parameterType="mybatis.ParameterDTO">
		SELECT * FROM myboard WHERE idx=#{board_idx} AND id=#{user_id}
	</select>	
	 	  
	<!--  
	수정처리. 전송된 폼값은 커맨드객체를 통해 한번에 전달받으므로 parameterType을 
	해당 DTO로 설정한 후 멤버변수명으로 값을 가져와서 쿼리문을 구성한다. EL과 동일하게
	멤버변수명으로 getter()를 호출하게된다. 
	-->
	<update id="modify" parameterType="mybatis.MyBoardDTO">
		UPDATE myboard 
			SET	name=#{name}, contents=#{contents}
			WHERE idx=#{idx} AND id=#{id}
	</update>	
		
	<!-- 삭제처리. 전달되는 파라미터 순서대로 param1, 2와 같이 기술한다. -->
	<delete id="delete">
		DELETE FROM myboard WHERE idx=#{param1}	AND id=#{param2}
	</delete>
	
	
	<!-- ### 방명록 2차 버전에서 사용 ### -->
	<!-- 검색어가 있는 경우 조건부로 동적쿼리문을 구성하기 위해 <if>문을 사용한다. 
	파라미터는 ParameterDTO에 저장되어 전달되므로 parameterType을 명시해서 
	해당 객체 저장된 값을 쿼리문에 적용한다. <if>문은 JSTL의 문법과 동일하다.  
	검색어가 null이 아닌 동시에 빈값이 아닌 경우에만 where절을 동적으로 추가한다.
	-->
	<select id="getTotalCountSearch" resultType="int" 
		parameterType="mybatis.ParameterDTO">
		SELECT COUNT(*) from myboard		
		<if test="searchTxt!=null and !searchTxt.equals('')">
			WHERE ${searchField} like '%'||#{searchTxt}||'%'			
		</if>
	</select>
	<select id="listPageSearch" resultType="mybatis.MyBoardDTO" 
		parameterType="mybatis.ParameterDTO">			
		SELECT * FROM (
		    SELECT Tb.*, rownum rNum FROM (
		        SELECT * FROM myboard 		        
		        <if test="searchTxt!=null and !searchTxt.equals('')">
					WHERE ${searchField} like '%'||#{searchTxt}||'%'
				</if>				
		        ORDER BY idx DESC
		    ) Tb
		)
		WHERE rNum<![CDATA[>=]]>#{start} AND rNum<![CDATA[<=]]>#{end}
	</select>
	<!--  
	CDATA : Unparsed Character Data. 파싱되지 않는 문자데이터라는 뜻을 가지고있다. 
		Mapper에서는 꺽쇄괄호로 시작되는 모든 문자열을 엘리먼트로 판단하기 때문에 
		쿼리문 사이에 비교연산자를 사용하면 에러가 발생한다. 
		따라서 파싱되지 않는 문자라는것을 명시하기 위해 CDATA를 사용해야한다.
	-->
	 
	
	<!--  
	Map컬렉션을 사용하는 경우 parameterType에서 "java.util.Map" 혹은
	"map" 둘 다 사용할 수 있다. 패키지명을 포함한 풀경로를 써야하지만 컬렉션의
	경우 JDK에서 기본적으로 제공되는 클래스이므로 패키지명은 생략할 수 있다. 
	인파라미터는 Map의 key를 통해 설정한다. 
	-->	
	<select id="hashMapUse" resultType="mybatis.MyBoardDTO" 
		parameterType="java.util.Map">			
		SELECT * FROM myboard		
		WHERE id=#{key_id} or name=#{key_name} or contents=#{key_contents}		
		ORDER BY idx DESC
	</select>
	
	<!--  
	ArrayList도 parameterType에 "java.util.ArrayList" 혹은 "list"로 기술할 수 있다. 
	<foreach> 태그의 속성설명
		collection : List컬렉션을 사용하므로 list로 속성값을 지정한다.(규칙)
		item : 반복시 원소를 임시로 저장하는 변수명
		index : 인덱스
		open : 동적쿼리문의 시작부분 지정
		close : 동적쿼리문의 종료부분 지정
		separator : 각 항목의 구분자로 설정(or, and)
	-->	
	<select id="arrayListUse" resultType="mybatis.MyBoardDTO" 
		parameterType="java.util.ArrayList">
		SELECT * FROM myboard	
		WHERE
		<foreach collection="list" item="item" index="index"  
			open="(" close=")" separator="or">
			name=#{item}
		</foreach>
		ORDER BY idx DESC
	</select>
	<!--  
		만약 컨트롤러에서 아래와 같이 전송했다면 <foreach>태그에서 생성된 쿼리문은
		다음과 같다. 
		리스트에 저장된 값
			arrayList.add("고스톱");
			arrayList.add("낙자쌤");
		생성된 쿼리문 
			select .... where (name='고스톱' or name='낙자쌤') ... DESC ;		
	-->
	
</mapper>
